package web

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"sync"
	"time"

	"phenix/api/experiment"
	"phenix/api/vm"
	"phenix/app"
	"phenix/types"
	"phenix/util/mm"
	"phenix/util/notes"
	"phenix/util/plog"
	"phenix/web/broker"
	"phenix/web/cache"
	"phenix/web/util"
	"phenix/web/weberror"

	bt "phenix/web/broker/brokertypes"
)

var (
	// Track context cancelers and wait groups for periodically running apps.
	cancelers = make(map[string][]context.CancelFunc)
	waiters   = make(map[string]*sync.WaitGroup)
)

func startExperiment(name string) ([]byte, error) {
	if err := cache.LockExperimentForStarting(name); err != nil {
		err := weberror.NewWebError(err, "unable to lock experiment %s for starting", name)
		return nil, err.SetStatus(http.StatusConflict)
	}

	defer cache.UnlockExperiment(name)

	broker.Broadcast(
		bt.NewRequestPolicy("experiments/start", "update", name),
		bt.NewResource("experiment", name, "starting"),
		nil,
	)

	type result struct {
		exp *types.Experiment
		err error
	}

	status := make(chan result)

	go func() {
		// We don't want to use the HTTP request's context here.
		ctx, cancel := context.WithCancel(context.Background())
		cancelers[name] = append(cancelers[name], cancel)

		ctx = notes.Context(ctx, false)

		ch := make(chan error)

		if err := experiment.Start(ctx, experiment.StartWithName(name), experiment.StartWithErrorChannel(ch)); err != nil {
			cancel() // avoid leakage
			delete(cancelers, name)

			status <- result{nil, err}
		} else {
			for _, note := range notes.Info(ctx, false) {
				plog.Info(plog.TypeSystem, note)
			}

			done := make(chan struct{})

			// Goroutine to periodically print out logs generated by experiment while
			// starting.
			go func() {
				for {
					for _, note := range notes.Info(ctx, false) {
						plog.Info(plog.TypeSystem, note)
					}

					select {
					case <-done:
						return
					default:
						time.Sleep(1 * time.Second)
					}
				}
			}()

			go func() {
				for err := range ch {
					plog.Warn(plog.TypeSystem, "delayed error starting experiment", "exp", name, "err", err)

					var delayErr experiment.DelayedVMError

					if errors.As(err, &delayErr) {
						broker.Broadcast(
							bt.NewRequestPolicy("experiments/start", "update", name),
							bt.NewResource("experiment/vm", fmt.Sprintf("%s/%s", name, delayErr.VM), "error"),
							json.RawMessage(fmt.Sprintf(`{"error": "unable to start delayed VM %s"}`, delayErr.VM)),
						)
					}
				}

				// Stop periodically printing out logs via previous Goroutine.
				close(done)
			}()
		}

		exp, err := experiment.Get(name)

		status <- result{exp, err}
	}()

	var progress float64
	count, _ := vm.Count(name)

	for {
		select {
		case s := <-status:
			if s.err != nil {
				broker.Broadcast(
					bt.NewRequestPolicy("experiments/start", "update", name),
					bt.NewResource("experiment", name, "errorStarting"),
					nil,
				)

				err := weberror.NewWebError(s.err, "unable to start experiment %s", name)
				return nil, err.SetStatus(http.StatusBadRequest)
			}

			// We don't want to use the HTTP request's context here.
			ctx, cancel := context.WithCancel(context.Background())
			cancelers[name] = append(cancelers[name], cancel)

			var wg sync.WaitGroup
			waiters[name] = &wg

			if err := app.PeriodicallyRunApps(ctx, &wg, s.exp); err != nil {
				cancel() // avoid leakage
				delete(cancelers, name)
				delete(waiters, name)

				fmt.Printf("Error scheduling experiment apps to run periodically: %v\n", err)
			}

			vms, err := vm.List(name)
			if err != nil {
				// TODO
				plog.Error(plog.TypeSystem, "listing VMs in experiment", "exp", name, "err", err)
			}

			body, err := marshaler.Marshal(util.ExperimentToProtobuf(*s.exp, "", vms))
			if err != nil {
				err := weberror.NewWebError(err, "unable to start experiment %s", name)
				return nil, err.SetStatus(http.StatusInternalServerError)
			}

			broker.Broadcast(
				bt.NewRequestPolicy("experiments/start", "update", name),
				bt.NewResource("experiment", name, "start"),
				body,
			)

			return body, nil
		default:
			p, err := mm.GetLaunchProgress(name, count)
			if err != nil {
				plog.Error(plog.TypeSystem, "getting progress for experiment", "exp", name, "err", err)
				continue
			}

			if p > progress {
				progress = p
			}

			plog.Debug(plog.TypeSystem, "percent deployed", "percent", progress*100.0, "exp", name)

			status := map[string]interface{}{
				"percent": progress,
			}

			marshalled, _ := json.Marshal(status)

			broker.Broadcast(
				bt.NewRequestPolicy("experiments/start", "update", name),
				bt.NewResource("experiment", name, "progress"),
				marshalled,
			)

			time.Sleep(2 * time.Second)
		}
	}
}

func stopExperiment(name string) ([]byte, error) {
	if err := cache.LockExperimentForStopping(name); err != nil {
		err := weberror.NewWebError(err, "unable to lock experiment %s for stopping", name)
		return nil, err.SetStatus(http.StatusConflict)
	}

	defer cache.UnlockExperiment(name)

	broker.Broadcast(
		bt.NewRequestPolicy("experiments/stop", "update", name),
		bt.NewResource("experiment", name, "stopping"),
		nil,
	)

	if cancels, ok := cancelers[name]; ok {
		for _, cancel := range cancels {
			cancel()
		}

		if wg, ok := waiters[name]; ok {
			wg.Wait()
		}
	}

	delete(cancelers, name)
	delete(waiters, name)

	if err := experiment.Stop(name); err != nil {
		broker.Broadcast(
			bt.NewRequestPolicy("experiments/stop", "update", name),
			bt.NewResource("experiment", name, "errorStopping"),
			nil,
		)

		err := weberror.NewWebError(err, "unable to stop experiment %s", name)
		return nil, err.SetStatus(http.StatusBadRequest)
	}

	exp, err := experiment.Get(name)
	if err != nil {
		// TODO
	}

	vms, err := vm.List(name)
	if err != nil {
		// TODO
	}

	body, err := marshaler.Marshal(util.ExperimentToProtobuf(*exp, "", vms))
	if err != nil {
		err := weberror.NewWebError(err, "unable to stop experiment %s", name)
		return nil, err.SetStatus(http.StatusInternalServerError)
	}

	broker.Broadcast(
		bt.NewRequestPolicy("experiments/stop", "update", name),
		bt.NewResource("experiment", name, "stop"),
		body,
	)

	return body, nil
}
