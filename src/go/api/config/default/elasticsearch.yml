apiVersion: phenix.sandia.gov/v1
kind: Image
metadata:
    name: PHENIX-elasticsearch
spec:
    components:
        - main
        - restricted
        - universe
        - multiverse
    compress: true
    format: qcow2
    mirror: http://us.archive.ubuntu.com/ubuntu
    name: PHENIX-elasticsearch
    no_virtuals: false
    overlays: null
    packages:
        - gpg
        - curl
        - ethtool
        - ncat
        - net-tools
        - openssh-server
        - rsync
        - ssh
        - tcpdump
        - tmux
        - vim
        - wget
        - linux-image-generic
        - linux-headers-generic
        - wmctrl
        - xdotool
        - xubuntu-desktop
    ramdisk: false
    release: jammy
    script_order:
        - POSTBUILD_GUI
        - POSTBUILD_APT_CLEANUP
        - POSTBUILD_NO_ROOT_PASSWD
        - POSTBUILD_PHENIX_HOSTNAME
        - POSTBUILD_PHENIX_BASE
        - FIREFOX
        - ELASTICSEARCH
    scripts:
        FIREFOX: |
            # -------------------------------------------------- Firefox -----------------------------------------------------
            DEBIAN_FRONTEND=noninteractive
            apt-get update
            if ! apt search ^firefox-esr$ | grep -q firefox-esr; then
                echo "--------GETTING PPA BEFORE INSTALLING FIREFOX!!!---------"
                apt-get install -y software-properties-common
                add-apt-repository ppa:mozillateam/ppa
                apt-get update
            fi
            echo "--------INSTALLING FIREFOX!!!---------"
            apt-get install -y firefox-esr
            if ! [ -f "/usr/bin/firefox" ]; then
                ln -s /usr/bin/firefox-esr /usr/bin/firefox
            fi
        ELASTICSEARCH: |
            ##############################################################################
            # INSTALLS:
            #   [ Elasticsearch ]
            #     - Distributed, RESTful search and analytics engine
            #     - https://www.elastic.co/elasticsearch
            #   [ Kibana ]
            #     - Data visualization dashboard software for Elasticsearch
            #     - https://www.elastic.co/kibana
            #   [ Kibana Autostart ]
            #     - Opens Firefox to Kibana default page
            #
            # REQUIRES:
            #   [ Scripts ]
            #     - firefox.sh
            #   [ Packages ]
            #     - gpg
            ##############################################################################
            # ----------------------------------------------- Elastic/Kibana  ------------------------------------------------
            curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | gpg --dearmor -o /usr/share/keyrings/elastic.gpg
            echo "deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-8.x.list
            apt-get update
            apt-get install -y elasticsearch kibana
            sed -i -e 's/ \-\-quiet//g' /usr/lib/systemd/system/elasticsearch.service
            systemctl enable elasticsearch
            systemctl enable kibana
            # Make the autostart
            mkdir -p /root/.config/autostart
            cat > /root/.config/autostart/kibana.desktop <<EOF
            [Desktop Entry]
            Name=Kibana
            Type=Application
            Exec=/root/.kibana.sh
            Terminal=false
            EOF
            chmod +x /root/.config/autostart/kibana.desktop
            cat > /root/.kibana.sh <<EOF
            #!/bin/bash
            # wait for kibana to start up
            while [[ "\$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5601)" != "200" ]]; do sleep 5; done
            nohup firefox -new-tab localhost:5601 &
            EOF
            chmod +x /root/.kibana.sh
            mkdir -p /usr/local/bin
            cat > /usr/local/bin/query-flows.sh <<EOF
            #!/bin/bash
            curl -H "Content-Type: application/json" http://localhost:9200/packetbeat-\*/_search -d '\
              {
                "_source": [
                  "source.ip",
                  "source.bytes",
                  "destination.ip",
                  "destination.bytes"
                ],
                "query": {
                  "query_string": {
                    "query": "type:flow AND network.type:ipv4"
                  }
                },
                "size": 10000
              }
            ' 2> /dev/null
            EOF
            chmod +x /usr/local/bin/query-flows.sh
        POSTBUILD_APT_CLEANUP: |
            # --------------------------------------------------- Cleanup ----------------------------------------------------
            apt clean || apt-get clean || echo "unable to clean apt cache"
        POSTBUILD_GUI: |
            # ----------------------------------------------------- GUI ------------------------------------------------------
            apt-get purge -y gdm3 # messes with no-root-password login
            mkdir -p /root/.config/xfce4/
            echo "TerminalEmulator=xfce4-terminal" > /root/.config/xfce4/helpers.rc
            mkdir -p /root/.config/autostart/
            cat > /root/.config/autostart/init.desktop <<EOF
            [Desktop Entry]
            Name=Init
            Type=Application
            Exec=/root/.init.sh
            Terminal=false
            EOF
            cat >> /root/.init.sh <<EOF
            xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
            sleep 1
            xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitorVirtual-1/workspace0/last-image -s "/usr/share/backgrounds/Optical_Fibers_in_Dark_by_Elena_Stravoravdi.jpg"
            EOF
            chmod +x /root/.init.sh
            # Autologin root
            cat > /etc/lightdm/lightdm.conf <<EOF
            [Seat:*]
            autologin-user=root
            autologin-user-timeout=0
            display-setup-script=xrandr --output Virtual-1 --mode 1440x900
            [daemon]
            AutomaticLoginEnable=true
            AutomaticLogin=root
            EOF
            sed -e '/pam_succeed_if.so/s/^#*/#/' -i /etc/pam.d/lightdm-autologin
        POSTBUILD_NO_ROOT_PASSWD: |
            # ---------------------------------------------- No Root Password ------------------------------------------------
            sed -i 's/nullok_secure/nullok/' /etc/pam.d/common-auth
            sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
            sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config
            sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
            sed -i 's/PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config
            passwd -d root
        POSTBUILD_PHENIX_BASE: |
            # ----------------------------------------------------- Base -----------------------------------------------------
            cat > /etc/systemd/system/miniccc.service <<EOF
            [Unit]
            Description=miniccc
            [Service]
            ExecStart=/opt/minimega/bin/miniccc -v=false -serial /dev/virtio-ports/cc -logfile /var/log/miniccc.log
            [Install]
            WantedBy=multi-user.target
            EOF
            cat > /etc/systemd/system/phenix.service <<EOF
            [Unit]
            Description=phenix startup service
            After=network.target systemd-hostnamed.service
            [Service]
            Environment=LD_LIBRARY_PATH=/usr/local/lib
            ExecStart=/usr/local/bin/phenix-start.sh
            RemainAfterExit=true
            StandardOutput=journal
            Type=oneshot
            [Install]
            WantedBy=multi-user.target
            EOF
            mkdir -p /etc/systemd/system/multi-user.target.wants
            ln -s /etc/systemd/system/miniccc.service /etc/systemd/system/multi-user.target.wants/miniccc.service
            ln -s /etc/systemd/system/phenix.service /etc/systemd/system/multi-user.target.wants/phenix.service
            mkdir -p /usr/local/bin
            cat > /usr/local/bin/phenix-start.sh <<EOF
            #!/bin/bash
            for file in /etc/phenix/startup/*; do
                echo \$file
                bash \$file
            done
            EOF
            chmod +x /usr/local/bin/phenix-start.sh
            mkdir -p /etc/phenix/startup
        POSTBUILD_PHENIX_HOSTNAME: |
            # -------------------------------------------------- Hostname ----------------------------------------------------
            echo "phenix" > /etc/hostname
            sed -i 's/127.0.1.1 .*/127.0.1.1 phenix/' /etc/hosts
            cat > /etc/motd <<EOF

            ██████╗ ██╗  ██╗███████╗███╗  ██╗██╗██╗  ██╗
            ██╔══██╗██║  ██║██╔════╝████╗ ██║██║╚██╗██╔╝
            ██████╔╝███████║█████╗  ██╔██╗██║██║ ╚███╔╝
            ██╔═══╝ ██╔══██║██╔══╝  ██║╚████║██║ ██╔██╗
            ██║     ██║  ██║███████╗██║ ╚███║██║██╔╝╚██╗
            ╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚══╝╚═╝╚═╝  ╚═╝

            EOF
            echo "\nBuilt with phenix image on $(date)\n\n" >> /etc/motd
    size: 25G
    skip_default_packages: false
    variant: mingui
