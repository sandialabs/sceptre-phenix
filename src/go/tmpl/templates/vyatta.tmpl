{{- $ntpAddr := index . "ntp-addr" -}}
{{- $node := index . "node" -}}
{{- $ipsec := index . "ipsec" -}}
{{- $vyos := index . "vyos" -}}
{{- $passwd := index . "passwd" -}}
{{- $ssh := index . "ssh" -}}
{{- $emulators := index . "emulators" -}}
{{- $snat := index . "snat" -}}
{{- $dnat := index . "dnat" -}}
{{- if $vyos -}}
#!/bin/vbash
source /opt/vyatta/etc/functions/script-template
configure
# ------------------------------ Interfaces -------------------------------
    {{- range $idx, $iface := $node.Network.Interfaces }}
        {{- if eq $iface.Proto "dhcp" }}
set interface ethernet eth{{ $idx }} address dhcp
        {{- else }}
set interface ethernet eth{{ $idx }} address {{ $iface.Address }}/{{ $iface.Mask }}
        {{- end }}
        {{- if and (ge $iface.MTU 68) (le $iface.MTU 16000) }}
set interface ethernet eth{{ $idx }} mtu {{ $iface.MTU }}
        {{- end }}
        {{- if eq $iface.Proto "ospf" }}
            {{- if $node.Network.OSPF.DeadInterval }}
set protocols ospf interface eth{{ $idx }} dead-interval {{ $node.Network.OSPF.DeadInterval }}
            {{- end }}
            {{- if $node.Network.OSPF.HelloInterval }}
set protocols ospf interface eth{{ $idx }} hello-interval {{ $node.Network.OSPF.HelloInterval }}
            {{- end }}
            {{- if $node.Network.OSPF.RetransmissionInterval }}
set protocols ospf interface eth{{ $idx }} retransmit-interval {{ $node.Network.OSPF.RetransmissionInterval }}
            {{- end }}
        {{- end }}
        {{- if $iface.RulesetIn }}
            {{- range $ruleset := $node.Network.Rulesets }}
                {{- if eq $iface.RulesetIn $ruleset.Name }}
                    {{- range $rule := $ruleset.Rules }}
set firewall ipv4 name {{ $iface.RulesetIn }} rule {{ $rule.ID }} inbound-interface name eth{{ $idx }}
                    {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
        {{- if $iface.RulesetOut }}
            {{- range $ruleset := $node.Network.Rulesets }}
                {{- if eq $iface.RulesetOut $ruleset.Name }}
                    {{- range $rule := $ruleset.Rules }}
set firewall ipv4 name {{ $iface.RulesetOut }} rule {{ $rule.ID }} outbound-interface name eth{{ $idx }}
                    {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
    {{- end }}
# ---------------------------------- SNAT ---------------------------------
    {{- if $snat }}
        {{- range $idx, $rule := $snat }}
            {{- $num := addInt $idx 100 }}
set nat source rule {{ $num }} outbound-interface name eth{{ $rule.InterfaceIndex }}
            {{- if $rule.SourceAddress }}
set nat source rule {{ $num }} source address {{ $rule.SourceAddress }}
            {{- end }}
            {{- if $rule.SourcePort }}
set nat source rule {{ $num }} source port {{ $rule.SourcePort }}
            {{- end }}
            {{- if or $rule.DestinationAddress $rule.DestinationPort }}
                {{- if $rule.DestinationAddress }}
set nat source rule {{ $num }} destination address {{ $rule.DestinationAddress }}
                {{- end }}
                {{- if $rule.DestinationPort }}
set nat source rule {{ $num }} destination port {{ $rule.DestinationPort }}
                {{- end }}
            {{- end }}
            {{- if $rule.Protocol }}
set nat source rule {{ $num }} protocol {{ $rule.Protocol }}
            {{- end }}
            {{- if $rule.TranslationAddress }}
set nat source rule {{ $num }} translation address {{ $rule.TranslationAddress }}
                {{- if $rule.TranslationPort }}
set nat source rule {{ $num }} translation port {{ $rule.TranslationPort }}
                {{- end }}
            {{- else }}
set nat source rule {{ $num }} translation address masquerade
            {{- end }}
        {{- end }}
    {{- end }}
# ---------------------------------- DNAT ---------------------------------
    {{- if $dnat }}
        {{- range $idx, $rule := $dnat }}
            {{- $num := addInt $idx 100 }}
set nat destination rule {{ $num }} inbound-interface name eth{{ $rule.InterfaceIndex }}
            {{- if or $rule.SourceAddress $rule.SourcePort }}
                {{- if $rule.SourceAddress }}
set nat destination rule {{ $num }} source address {{ $rule.SourceAddress }}
                {{- end }}
                {{- if $rule.SourcePort }}
set nat destination rule {{ $num }} source port '{{ $rule.SourcePort }}'
                {{- end }}
            {{- end }}
            {{- if $rule.DestinationAddress }}
set nat destination rule {{ $num }} destination address {{ $rule.DestinationAddress }}
            {{- end }}
            {{- if $rule.DestinationPort }}
set nat destination rule {{ $num }} destination port '{{ $rule.DestinationPort }}'
            {{- end }}
            {{- if $rule.Protocol }}
set nat destination rule {{ $num }} protocol '{{ $rule.Protocol }}'
            {{- end }}
set nat destination rule {{ $num }} translation address {{ $rule.TranslationAddress }}
            {{- if $rule.TranslationPort }}
set nat destination rule {{ $num }} translation port '{{ $rule.TranslationPort }}'
            {{- end }}
        {{- end }}
    {{- end }}
# ----------------------------- Traffic-Policy ----------------------------
    {{- if $emulators }}
        {{- range $emu := $emulators }}
set qos policy network-emulator {{ $emu.Name }}
            {{- if $emu.Bandwidth }}
set qos policy network-emulator {{ $emu.Name }} bandwidth '{{ $emu.Bandwidth }}'
            {{- end }}
            {{- if $emu.Delay }}
set qos policy network-emulator {{ $emu.Name }} delay '{{ $emu.Delay }}'
            {{- end }}
            {{- if $emu.Corruption }}
set qos policy network-emulator {{ $emu.Name }} corruption '{{ $emu.Corruption }}'
            {{- end }}
            {{- if $emu.Loss }}
set qos policy network-emulator {{ $emu.Name }} loss '{{ $emu.Loss }}'
            {{- end }}
            {{- if $emu.Reordering }}
set qos policy network-emulator {{ $emu.Name }} reordering '{{ $emu.Reordering }}'
            {{- end }}
            {{- range $out := $emu.Egress }}
set qos interface {{ $out }} egress {{ $emu.Name }}
            {{- end }}
        {{- end }}
    {{- end }}
# -------------------------------- Firewall -------------------------------
    {{- range $ruleset := $node.Network.Rulesets }}
set firewall ipv4 name {{ $ruleset.Name }} default-action {{ $ruleset.Default }}
set firewall ipv4 name {{ $ruleset.Name }} description '{{ $ruleset.Description }}'
        {{- range $rule := $ruleset.Rules }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} action {{ $rule.Action }}
            {{- if $rule.Description }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} description '{{ $rule.Description }}'
            {{- end }}
            {{- if $rule.Protocol }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} protocol '{{ $rule.Protocol }}'
            {{- end }}
            {{- if $rule.Source }}
                {{- if $rule.Source.Address }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} source address {{ $rule.Source.Address }}
                {{- end }}
                {{- if $rule.Source.Port }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} source port {{ $rule.Source.Port }}
                {{- end }}
            {{- end }}
            {{- if $rule.Destination }}
                {{- if $rule.Destination.Address }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} destination address {{ $rule.Destination.Address }}
                {{- end }}
                {{- if $rule.Destination.Port }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} destination port {{ $rule.Destination.Port }}
                {{- end }}
            {{- end }}
            {{- if $rule.Stateful }}
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} state established
set firewall ipv4 name {{ $ruleset.Name }} rule {{ $rule.ID }} state related
            {{- end }}
        {{- end }}
    {{- end }}
# --------------------------------- Routes --------------------------------
    {{- range $node.Network.Routes }}
set protocols static route {{ .Destination }} next-hop {{ .Next }}
        {{- if .Cost }}
set protocols static route {{ .Destination }} next-hop {{ .Next }} distance {{ .Cost }}
        {{- end }}
    {{- end }}
# ---------------------------------- OSPF ---------------------------------
    {{- if $node.Network.OSPF }}
        {{- range $area := $node.Network.OSPF.Areas }}
set protocols ospf area {{ $area.AreaID }}
            {{- range $network := $area.AreaNetworks }}
set protocols ospf area {{ $area.AreaID }} network {{ $network.Network }}
            {{- end }}
        {{- end }}
        {{- if $node.Network.OSPF.RouterID }}
set protocols ospf parameters router-id {{ $node.Network.OSPF.RouterID }}
        {{- end }}
set protocols ospf redistribute connected
    {{- end }}
# --------------------------------- IPsec ---------------------------------
    {{- if $ipsec }}
set vpn ipsec esp-group ESP-1W lifetime 1800
set vpn ipsec esp-group ESP-1W mode tunnel
set vpn ipsec esp-group ESP-1W pfs enable
set vpn ipsec esp-group ESP-1W proposal 1 encryption aes256
set vpn ipsec esp-group ESP-1W proposal 1 hash sha1
set vpn ipsec ike-group IKE-1W lifetime 3600
set vpn ipsec esp-group IKE-1W proposal 1 encryption aes256
set vpn ipsec esp-group IKE-1W proposal 1 hash sha1
        {{- range $ipsec.Interfaces }}
set vpn ipsec interface {{ . }}
        {{- end }}
        {{- range $site := $ipsec.Sites }}
set vpn ipsec authentication psk PSK-KEY id '{{ $site.Local }}'
set vpn ipsec authentication psk PSK-KEY id '{{ $site.Remote }}'
set vpn ipsec authentication psk PSK-KEY secret '{{ $site.PresharedKey }}'
set vpn ipsec site-to-site peer {{ $site.Peer }} authentication mode pre-shared-secret
set vpn ipsec site-to-site peer {{ $site.Peer }} authentication local-id '{{ $site.Local }}'
set vpn ipsec site-to-site peer {{ $site.Peer }} authentication remote-id '{{ $site.Remote }}'
set vpn ipsec site-to-site peer {{ $site.Peer }} connection-type initiate
set vpn ipsec site-to-site peer {{ $site.Peer }} default-esp-group ESP-1W
set vpn ipsec site-to-site peer {{ $site.Peer }} ike-group IKE-1W
set vpn ipsec site-to-site peer {{ $site.Peer }} local-address {{ $site.Local }}
set vpn ipsec site-to-site peer {{ $site.Peer }} remote-address {{ $site.Remote }}
            {{- range $idx, $tunnel := $site.Tunnels }}
set vpn ipsec site-to-site peer {{ $site.Peer }} tunnel {{ $idx }} local prefix {{ $tunnel.Local }}
set vpn ipsec site-to-site peer {{ $site.Peer }} tunnel {{ $idx }} remote prefix {{ $tunnel.Remote }}
            {{- end }}
        {{- end }}
    {{- end }}
# -------------------------------- Services -------------------------------
    {{- if $ssh }}
set service ssh listen-address {{ $ssh }}
    {{- end }}
    {{- if $ntpAddr }}
set service ntp server {{ $ntpAddr }} prefer
    {{- else }}
delete service ntp
    {{- end }}
# --------------------------------- System --------------------------------
set system host-name {{ $node.RouterName }}
commit
save
exit
{{- else }}
interfaces {
    {{- range $idx, $iface := $node.Network.Interfaces }}
    ethernet eth{{ $idx }} {
        {{- if eq $iface.Proto "dhcp" }}
        address dhcp
        {{- else }}
        address {{ $iface.Address }}/{{ $iface.Mask }}
        {{- end }}
        duplex auto
        {{- if and (ge $iface.MTU 68) (le $iface.MTU 16000) }}
        mtu {{ $iface.MTU }}
        {{- end }}
        {{- if eq $iface.Proto "ospf" }}
        ip {
            ospf {
            {{- if $node.Network.OSPF.DeadInterval }}
                dead-interval {{ $node.Network.OSPF.DeadInterval }}
            {{- end }}
            {{- if $node.Network.OSPF.HelloInterval }}
                hello-interval {{ $node.Network.OSPF.HelloInterval }}
            {{- end }}
            {{- if $node.Network.OSPF.RetransmissionInterval }}
                retransmit-interval {{ $node.Network.OSPF.RetransmissionInterval }}
            {{- end }}
                transmit-delay 1
            }
        }
        {{- end }}
        {{- if or $iface.RulesetIn $iface.RulesetOut }}
        firewall {
            {{- if $iface.RulesetIn }}
            in {
                name {{ $iface.RulesetIn }}
            }
            {{- end }}

            {{- if $iface.RulesetOut }}
            out {
                name {{ $iface.RulesetOut }}
            }
            {{- end }}
        }
        {{- end }}
        {{- if $emulators }}
        traffic-policy {
            {{- range $emulator := $emulators }}
                {{- range $in := $emulator.Ingress }}
                    {{- if eq $in $iface.Name }}
            in {{ $emulator.Name }}
                        {{- break }}
                    {{- end }}
                {{- end }}
                {{- range $out := $emulator.Egress }}
                    {{- if eq $out $iface.Name }}
            out {{ $emulator.Name }}
                        {{- break }}
                    {{- end }}
                {{- end }}
            {{- end }}
        }
        {{- end }}
    }
    {{- end }}
}

nat {
    {{- if $snat }}
    source {
        {{- range $i, $rule := $snat }}
        rule {{ addInt $i 100 }} {
            outbound-interface eth{{ $rule.InterfaceIndex }}
            source {
            {{- if $rule.SourceAddress }}
                address {{ $rule.SourceAddress }}
            {{- end }}
            {{- if $rule.SourcePort }}
                port {{ $rule.SourcePort }}
            {{- end }}
            }
            {{- if or $rule.DestinationAddress $rule.DestinationPort }}
            destination {
                {{- if $rule.DestinationAddress }}
                address {{ $rule.DestinationAddress }}
                {{- end }}
                {{- if $rule.DestinationPort }}
                port {{ $rule.DestinationPort }}
                {{- end }}
            }
            {{- end }}
            {{- if $rule.Protocol }}
            protocol {{ $rule.Protocol }}
            {{- end }}
            translation {
            {{- if $rule.TranslationAddress }}
                address {{ $rule.TranslationAddress }}
                {{- if $rule.TranslationPort }}
                port {{ $rule.TranslationPort }}
                {{- end }}
            {{- else }}
                address masquerade
            {{- end }}
            }
        }
        {{- end }}
    }
    {{- end }}
    {{- if $dnat }}
    destination {
        {{- range $i, $rule := $dnat }}
        rule {{ addInt $i 100 }} {
            inbound-interface eth{{ $rule.InterfaceIndex }}
            {{- if or $rule.SourceAddress $rule.SourcePort }}
            source {
                {{- if $rule.SourceAddress }}
                address {{ $rule.SourceAddress }}
                {{- end }}
                {{- if $rule.SourcePort }}
                port {{ $rule.SourcePort }}
                {{- end }}
            }
            {{- end }}
            destination {
            {{- if $rule.DestinationAddress }}
                address {{ $rule.DestinationAddress }}
            {{- end }}
            {{- if $rule.DestinationPort }}
                port {{ $rule.DestinationPort }}
            {{- end }}
            }
            {{- if $rule.Protocol }}
            protocol {{ $rule.Protocol }}
            {{- end }}
            translation {
                address {{ $rule.TranslationAddress }}
            {{- if $rule.TranslationPort }}
                port {{ $rule.TranslationPort }}
            {{- end }}
            }
        }
        {{- end }}
    }
    {{- end }}
}

firewall {
    {{- range $node.Network.Rulesets }}
        {{- if .Default }}
    name {{ .Name }} {
        default-action {{ .Default }}
            {{- if .Description }}
        description "{{ .Description }}"
            {{- end }}
            {{- range .Rules }}
        rule {{ .ID }} {
            action {{ .Action }}
                {{- if .Description }}
            description "{{ .Description }}"
                {{- end }}
                {{- if .Protocol }}
            protocol {{ .Protocol }}
                {{- end }}
                {{- if .Source }}
            source {
                    {{- if .Source.Address }}
                address {{ .Source.Address }}
                    {{- end }}
                    {{- if .Source.Port }}
                port {{ .Source.Port }}
                    {{- end }}
            }
                {{- end }}
                {{- if .Destination }}
            destination {
                    {{- if .Destination.Address }}
                address {{ .Destination.Address }}
                    {{- end }}
                    {{- if .Destination.Port }}
                port {{ .Destination.Port }}
                    {{- end }}
            }
                {{- end }}
                {{- if .Stateful }}
            state {
                established enable
                related enable
            }
                {{- end }}
        }
            {{- end }}
    }
        {{- end }}
    {{- end }}
}

    {{- if $emulators }}
traffic-policy {
        {{- range $emulator := $emulators }}
    network-emulator {{ $emulator.Name }} {
            {{- if $emulator.Bandwidth }}
        bandwidth {{ $emulator.Bandwidth }}
            {{- end }}
            {{- if $emulator.Burst }}
        burst {{ $emulator.Burst }}
            {{- end }}
            {{- if $emulator.Delay }}
        network-delay {{ $emulator.Delay }}
            {{- end }}
            {{- if $emulator.Corruption }}
        packet-corruption {{ $emulator.Corruption }}
            {{- end }}
            {{- if $emulator.Loss }}
        packet-loss {{ $emulator.Loss }}
            {{- end }}
            {{- if $emulator.Reordering }}
        packet-reordering {{ $emulator.Reordering }}
            {{- end }}
    }
        {{- end }}
}
    {{- end }}

protocols {
    static {
    {{- range $route := $node.Network.Routes }}
        route {{ $route.Destination }} {
            next-hop {{ $route.Next }} {
        {{- if $route.Cost }}
                distance {{ $route.Cost }}
        {{- else }}
                distance 1
        {{- end }}
            }
        }
    {{- end }}
    }

    ospf {
    {{- if $node.Network.OSPF }}
        {{- range $areas := $node.Network.OSPF.Areas }}
        area {{ $areas.AreaID }} {
            {{- range $networks := $areas.AreaNetworks }}
            network {{ $networks.Network }}
            {{- end }}
        }
        {{- end }}
        parameters {
        {{- if $node.Network.OSPF.RouterID }}
            router-id {{ $node.Network.OSPF.RouterID }}
        {{- end }}
        }
        redistribute {
            {{/* TODO: add redistribution stuff to OSPF schema definition */}}
            connected
        }
    {{- end }}
    }

    bgp {
        {{/* TODO: add BGP stuff to Network schema definition */}}
    }
}

vpn {
    {{- if $ipsec }}
    ipsec {
        esp-group ESP-1W {
            compression disable
            lifetime 1800
            mode tunnel
            pfs enable
            proposal 1 {
                encryption aes256
                hash sha1
            }
        }
        ike-group IKE-1W {
            lifetime 3600
            proposal 1 {
                encryption aes256
                hash sha1
            }
        }
        ipsec-interfaces {
            {{- range $key := $ipsec.Interfaces }}
            interface {{ $key }}
            {{- end }}
        }
        site-to-site {
            {{- range $site := $ipsec.Sites }}
            peer {{ $site.Remote }} {
                authentication {
                    mode pre-shared-secret
                    pre-shared-secret {{ $site.PresharedKey }}
                }
                connection-type initiate
                default-esp-group ESP-1W
                ike-group IKE-1W
                local-address {{ $site.Local }}
                {{- range $idx, $tunnel := $site.Tunnels }}
                tunnel {{ $idx }} {
                    allow-nat-networks disable
                    allow-public-networks disable
                    local {
                        prefix {{ $tunnel.Local }}
                    }
                    remote {
                        prefix {{ $tunnel.Remote }}
                    }
                }
                {{- end }}
            }
            {{- end }}
        }
    }
    {{- end }}
}

    {{- if $ssh }}
service {
    ssh {
        listen-address {{ $ssh }}
    }
}
    {{- end }}

system {
    host-name {{ $node.RouterName }}
    {{- if $ntpAddr }}
    ntp {
        server {{ $ntpAddr }} {
            prefer
        }
    }
    {{- end }}
}
/* Warning: Do not remove the following line. */
/* === vyatta-config-version: "dhcp-relay@1:vrrp@1:zone-policy@1:content-inspection@3:webproxy@1:quagga@2:webgui@1:wanloadbalance@3:ipsec@3:firewall@4:conntrack-sync@1:cluster@1:system@4:qos@1:nat@3:dhcp-server@4:config-management@1" === */
{{- end }}
